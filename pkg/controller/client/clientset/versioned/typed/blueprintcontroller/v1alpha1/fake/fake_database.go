/*
Copyright The K6s Authors.

*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"github.com/farmer-hutao/k6s/pkg/controller"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/testing"
)

// FakeDatabases implements DatabaseInterface
type FakeDatabases struct {
	Fake *controller.FakeBlueprintcontrollerV1alpha1
	ns   string
}

var databasesResource = schema.GroupVersionResource{Group: "blueprintcontroller.k8s.io", Version: "v1alpha1", Resource: "databases"}

var databasesKind = schema.GroupVersionKind{Group: "blueprintcontroller.k8s.io", Version: "v1alpha1", Kind: "Database"}

// Get takes name of the database, and returns the corresponding database object, and an error if there is any.
func (c *FakeDatabases) Get(name string, options v1.GetOptions) (result *controller.Database, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(databasesResource, c.ns, name), &controller.Database{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controller.Database), err
}

// List takes label and field selectors, and returns the list of Databases that match those selectors.
func (c *FakeDatabases) List(opts v1.ListOptions) (result *controller.DatabaseList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(databasesResource, databasesKind, c.ns, opts), &controller.DatabaseList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &controller.DatabaseList{ListMeta: obj.(*controller.DatabaseList).ListMeta}
	for _, item := range obj.(*controller.DatabaseList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested databases.
func (c *FakeDatabases) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(databasesResource, c.ns, opts))

}

// Create takes the representation of a database and creates it.  Returns the server's representation of the database, and an error, if there is any.
func (c *FakeDatabases) Create(database *controller.Database) (result *controller.Database, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(databasesResource, c.ns, database), &controller.Database{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controller.Database), err
}

// Update takes the representation of a database and updates it. Returns the server's representation of the database, and an error, if there is any.
func (c *FakeDatabases) Update(database *controller.Database) (result *controller.Database, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(databasesResource, c.ns, database), &controller.Database{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controller.Database), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDatabases) UpdateStatus(database *controller.Database) (*controller.Database, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(databasesResource, "status", c.ns, database), &controller.Database{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controller.Database), err
}

// Delete takes name of the database and deletes it. Returns an error if one occurs.
func (c *FakeDatabases) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(databasesResource, c.ns, name), &controller.Database{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDatabases) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(databasesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &controller.DatabaseList{})
	return err
}

// Patch applies the patch and returns the patched database.
func (c *FakeDatabases) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *controller.Database, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(databasesResource, c.ns, name, pt, data, subresources...), &controller.Database{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controller.Database), err
}
